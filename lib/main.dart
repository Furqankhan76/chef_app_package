import 'package:chef_app/app/app.dart';
import 'package:chef_app/core/services/notification_service.dart'; // Import NotificationService
import 'package:chef_app/firebase_options.dart'; // Assuming firebase_options.dart will be generated by FlutterFire CLI
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_stripe/flutter_stripe.dart'; // Import Stripe

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize Stripe
  // TODO: Replace with your actual Stripe publishable key
  Stripe.publishableKey = 'pk_test_YOUR_PUBLISHABLE_KEY'; // Use test key for development
  // Optionally configure merchant identifier for Apple Pay
  // Stripe.merchantIdentifier = 'merchant.com.your_app_name';
  await Stripe.instance.applySettings();

  // Create ProviderContainer to initialize services before runApp
  final container = ProviderContainer();

  // Initialize Notification Service
  // We need to use the container to read the provider
  await container.read(notificationServiceProvider).initialize();

  // Pass the existing container to ProviderScope
  runApp(UncontrolledProviderScope(
    
    container: container,
    child: const MyApp(),
  ));
}

